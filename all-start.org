* 第一戒 (最终版)
1. 当在一个由原子构成的列表(lat)上递归时，问两个问题：（null? lat） 还有 else
2. 当在一个数字上递归时，问两个问题：（zero? n） 还有 else
3. 当在一个由s-表达式构成的列表(复合列表)上递归时，问三个问题： （null？ l）,(atom? (car l)), 还有else


* 第四戒(最终版)

递归时至少要有一个参数变化，并且向终止条件方向变化。变化的参数必须有终止测试条件：当递归原子
(lat)时使用(cdr lat). 当递归数n时使用(sub1 n).当递归一个s表达式的列表l,当(null? l) 或者(atom? (car l)) 使用(car l) 和 (cdr l)
递归时参数要向终止条件方向变化: 当使用cdr时,用null?测试终止
当使用sub1时,用zero?测试终止

* 第六戒
仅当函数正确后再化简


#+begin_src scheme
  (define rember*
   (lambda (a l)
     (cond
      ((null? l) (quote ()))
      ((not (list? (car l)))
       (cond
        ((eq? (car l) a)
         (rember* a (cdr l)))
        (else (cons (car l)
                    (rember* a (cdr l))))))
      (else (cons (rember* a (car l))
                  (rember* a (cdr l)))))))
(rember* 'suace '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)))
#+end_src

#+begin_src scheme
(define insertR*
  (lambda (new old l)
    (cond
      ((null? l) '())
      ((not (list? (car l)))
       (cond
         ((eq? (car l) old)
          (cons old
                (cons new
                      (insertR*  new old
                                 (cdr l)))))
         (else (cons (car l)
                     (insertR* new old (cdr l))))))
      (else (cons (insertR* new old (car l)) (insertR* new old (cdr l)))))))
#+end_src
#+begin_src scheme
  (define occur*
   (lambda (a l)
     (cond
       ((null? l) 0)
       ((not (list? (car l)))
        (cond
          ((eq? a (car l))
           (add1 (occur* a (cdr l))))
          (else (occur* a (cdr l)))))
       (else (+ (occur* a (car l)) (occur* a (cdr l)))))))

(occur* 'banana '((banana)
 (split ((((banana ice)))
         (cream (banana))
         sherbet))
 (banana)
 (bread)
 (banana brandy)))
#+end_src

#+begin_src scheme
  (define subst*
    (lambda (new old l)
      (cond
        ((null? l) '())
        ((not (list? (car l)))
         (cond
           ((eq? old (car l))
            (cons new (subst* new old (cdr l))))
           (else (cons (car l) (subst* new old (cdr l))))))
        (else (cons (subst* new old (car l)) (subst* new old (cdr l)))))))

(subst* 'orange 'banana '((banana)
 (split ((((banana ice)))
        (cream (banana))
        sherbet))
(banana)
(bread)
(banana brandy)))
#+end_src

#+begin_src scheme
  (define insertL*
    (lambda (new old l)
      (cond
        ((null? l) '())
        ((not (list? (car l)))
         (cond
           ((eq? (car l) old)
            (cons new (cons (car l) (insertL* new old (cdr l)))))
           (else (cons (car l) (insertL* new old (cdr l))))))
        (else (cons (insertL* new old (car l)) (insertL* new old (cdr l)))))))

(insertL* 'pecker 'chuck '((how much (wood))
 could
 ((a (wood) chuck))
 (((chuck)))
 (if (a) ((wood chuck)))
 could chuck wood))
#+end_src

#+begin_src scheme
(define member*
  (lambda (a l)
    (cond
      ((null? l) #f)
      ((not (list? (car l)))
       (or (eq? (car l) a)
           (member* a (cdr l))))
      (else (or (member* a (car l)) (member* a (cdr l)))))))

(member* 'chips '((potato) (chips (( with) fish) (chips))))
#+end_src

#+begin_src scheme
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((and (null? l1) (atom? (car l2))) #f)
      ((null? l1) #f)
      ((and (atom? (car l1)) (null? l2)) #f)
      ((and (atom? (car l1)) (atom? (car l2)))
       (and (eq? (car l1) (car l2)) (eqlist? (cdr l1) (cdr l2))))
      ((atom? (car l1)) #f)
      ((null? l2) #f)
      ((atom? (car l2)) #f)
      (else
       (and (eqlist? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2))))
      )))
#+end_src

#+begin_src scheme
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      ((and (atom? (car l1))
            (atom? (car l2)))
       (and (eq? (car l1) (car l2)))
            (eqlist? (cdr l1) (cdr l2)))
      ((or (atom? (car l1))
           (atom? (car l2))) #f)
      (else
       (and (eqlist? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2)))))))
#+end_src

#+begin_src scheme
(define equal?
  (lambda (s1 s2)
    (cond
      ((and (atom? s1) (atom? s2))
       (eqan? s1 s2))
      ((atom? s1) #f)
      ((atom? s2) #f)
      (else (eqlist? s1 s2)))))
#+end_src

#+begin_src scheme
(define equal?
  (lambda (s1 s2)
    (cond
      ((and (atom? s1) (atom? s2))
       (eqan? s1 s2))
      ((or (atom? s1) (atom? s2)) #f)
      (else (eqlist? s1 s2)))))
#+end_src

#+begin_src scheme
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      (else
       (and (equal? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2)))))))
#+end_src

#+begin_src scheme
(define rember
  (lambda (s l)
    (cond
      ((null? l) '())
      ((not (list? (car l)))
       (cond
         ((equal? (car l) s) (cdr l))
         (else (cons (car l) (rember s (cdr l))))))
      (else (cond
              ((equal? (car l) s) (cdr l))
              (else (cons (car l) (rember s (cdr l)))))))))
#+end_src

#+begin_src scheme
(define rember
  (lambda (s l)
    (cond
      ((null? (car l)) '())
      (else (cond
              ((equal? (car l) s) (cdr l))
              (else (cons (car l)
                          (rember s (cdr l)))))))))
#+end_src
* 第七戒
在相同本性的东西上递归子组成部分
- list表
- 算术表达式
  
* 第八戒
使用辅助函数来抽象表达式
