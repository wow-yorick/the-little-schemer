#+begin_src scheme
(define set?
 (lambda (lat)
   (cond
     ((null? lat) #t)
     ((member? (car lat) (cdr lat)) #f)
     (else (set? (cdr lat))))))
#+end_src

#+begin_src scheme
(define makeset
 (lambda (lat)
   (cond
     ((null? lat) (quote ()))
     ((member? (car lat) (cdr lat))
      (makeset (cdr lat)))
     (else (cons (car lat)
                  (makeset (cdr lat)))))))
#+end_src

#+begin_src scheme
(define makeset
 (lambda (lat)
   (cond
    ((null? lat) (quote ()))
    (else (cons (car lat)
                (makeset
                 (multirember (car lat)
                              (cdr lat))))))))
#+end_src

#+begin_src scheme
(define subset?
 (lambda (set1 set2)
   (cond
    ((null? set1) #t)
    (else
     (and (member? (car set1) set2)
          (subset? (cdr set1) set2))))))
#+end_src

#+begin_src scheme
(define eqset?
  (lambda (set1 set2)
    (and (subset? set1 set2)
         (subset? set2 set1))))
#+end_src

#+begin_src scheme
(define intersect?
  (lambda (set1 set2)
    (cond
      ((null? set1) #f)
      ((member? (car set1) set2) #t)
      (else (intersect? (cdr set1) set2)))))

(define intersect
  (lambda (set1 set2)
    (cond
      ((null? set1) '())
      ((member? (car set1) set2)
       (cons (car set1) (intersect (cdr set1) set2)))
      (else (intersect (cdr set1) set2)))
    ))
#+end_src

#+begin_src scheme
(define union
  (lambda (set1 set2)
    (cond
      ((null? set1) set2)
      ((member? (car set1) set2)
       (union (cdr set1) set2))
      (else (cons (car set1)
                  (union (cdr set1) set2))))))
#+end_src
